#! /bin/zsh

## Justin Carr
## 7/2/2013

## /Dotfiles/_check2
## Identifies and prints files from Dotfiles/src/

# Globals

PROJ_DIR="uninit"
DEBUG=true
CHECK_ONLY=true
DOTFILES=()
BACKUP_TARGETS=()
BACKUP_DIR_NAME=~/backupDotfiles

# Functions

function help_text {

    echo
    echo "_check2"
    echo
    echo "A zsh script that safely symlinks the configurations found in the Dotfiles project to "
    echo "their rightful place on the home drive."
    echo
    echo "USAGE:"
    echo "_check2 requires either:"
    echo "-c :: Check for local versions of files from /Dotfiles/src/ in the home directory."
    echo "-l :: Do -c, backup local versions found by -c, and link dotfiles from /Dotfiles/src to the home directory."
    echo

}

function check_src {

    cd $PROJ_DIR/src/
    if $DEBUG
    then
        pwd
        ls -al
    fi

    while read -r -d $'\0' # Read should break the find input by null character 
    do
    DOTFILES+=("$REPLY")
    done < <(find . ! -name . -prune -print0)

    for d in $DOTFILES
    do
        # Check to see if there's already a file with this name in the
        # home directory
        cd 
        if [ -e $d ]
        then
            BACKUP_TARGETS+=$d
        fi
        cd -
    done
     
    echo
    echo "| FOUND: "
    for n in $DOTFILES
    do
        echo "| $n"
    done
    echo

    echo "| REPLACE: "
    for n in $BACKUP_TARGETS
    do
        echo "| $n"
    done
    echo 

}

function create_backup_dir {
    
    if $DEBUG
    then 
        echo "Begin create_backup_dir..."
        echo
    fi

    if [ -e $BACKUP_DIR_NAME ]
    then
        echo "$BACKUP_DIR_NAME found in home directory."
        echo "Using existing $BACKUP_DIR_NAME"
        echo
    else
        echo "$BACKUP_DIR_NAME not found in home directory."
        echo "Creating $BACKUP_DIR_NAME"
        echo
        mkdir $BACKUP_DIR_NAME
    fi

    if $DEBUG
    then 
        echo "End create_backup_dir..."
    fi
}

function backup_local_dotfiles {

    local run_results=$(date +"%m_%d_%Y_%S")

    if $DEBUG
    then
        echo "Begin backup_local_dotfiles..."
        echo "The results of this run can be found in:"
        echo "$BACKUP_DIR_NAME/$run_results"
        echo
    fi

    cd $BACKUP_DIR_NAME
    mkdir $run_results
    cd
    
    for n in $BACKUP_TARGETS
    do
	
	echo "moving $n to $BACKUP_DIR_NAME/$run_results/"
	if [ -d $n ]
	then
	    cp -r $n $BACKUP_DIR_NAME/$run_results/
	    rm -r $n
	else
            mv $n $BACKUP_DIR_NAME/$run_results/
	fi

    done
    
    if $DEBUG
    then
        echo "End backup_local_dotfiles."
        echo
    fi

}

function link_dotfiles {

    if $DEBUG
    then
        echo "Begin link_dotfiles..."
        echo
    fi
    
    cd 
    for d in $DOTFILES
    do
	echo "Linking $d from $PROJ_DIR/src/"
        ln -s $PROJ_DIR/src/$d ~/
    done

    if $DEBUG
    then
        echo "End link_dotfiles"
        echo
    fi

}

# Main {

set -e

if $DEBUG
then
    echo "Begin main in _check2..."
    echo
fi

if [ $# -ne 1 ]
then
    echo "INVALID INVOCATION OF _check2: $# arguments"
    help_text
    exit 1
fi

cd .. # /Dotfiles/setup --> /Dotfiles/
PROJ_DIR=$(pwd)

while getopts ":cbl" opt;
do
    case $opt in
        c)
            check_src
            break
            ;;
        b)
            check_src
            create_backup_dir
            backup_local_dotfiles
            break
            ;;
        l)
            check_src
            create_backup_dir
            backup_local_dotfiles
            link_dotfiles
            break
            ;;
        \?)
            echo "INVALID INVOCATION OF _check2: $OPTARG"
            help_text
            exit 1
            ;;
    esac
done

if $DEBUG
then
    echo "End main in _check2."
fi

# } End Main
